#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MaxStringLength 50

typedef struct node * stringStack;
typedef struct node {
    char * str;
    struct node * next;
} stackNode;

//3a. Write code for initializeStack

/* initialize stack referenced by the parameter */
void initializeStack (stringStack * stack)
{
    *stack = NULL;
}

//3b. Writ the code for pop

/* removes top item from stack referenced by parameter
    pre: the specified stack is initialized
    return: 0 if stack is empty
            otherwise, pointer to the item removed 
    */
char * pop (stringStack *stack)
{
    if (*stack == NULL)
        return (char *) 0;
    else {
        char *item;
        strcpy (item, (*stack)->str);
        stringStack temp = *stack;
        *stack = (*stack)->next;
        free (temp);
        return item;
    }
}

//3 Additional function: push implementation
/* insert given item onto top of the stack
    pre:  the specified stack is initialized
    returns:  -1 if stack is full
              otherwise, length of item, if item added
    */
int push (stringStack *stack, char * item) 
{
    stackNode *new = malloc (sizeof (stackNode));
    strcpy (new->str, item);
    new->next = *stack;
    *stack = new;
    return strlen(item);
}

int main()
{
    
    stringStack myStack;
    initializeStack (&myStack);
    
    char a [6] = "apple";
    char b [6] = "beans";
    push (&myStack, a);
    push (&myStack, b);
    //pop (&myStack);
    return 0;
}